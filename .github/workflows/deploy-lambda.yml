name: Deploy //environment//

on:
  workflow_dispatch:
  push:
    branches:
      - //branch//

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy To Lambda
    environment: //github_environment//
    runs-on: ubuntu-latest
    steps:
      - name: Check for variables
        run: |
          if [ -z "${{ vars.VPC_ID }}" ] || [ -z "${{ vars.DB_PASSWORD }}" ] || [ -z "${{ vars.SSL_ARN }}" ] || [ -z "${{ vars.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ vars.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "Error: Required variables VPC_ID or DB_PASSWORD or SSL_ARN or AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY are missing." >&2
            exit 1
          fi
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Compile CSS and Javascript
        env:
          ENV: ${{ vars.ENV }}
        run: |
          printf "%s" "$ENV" > ".env"
          npm install
          npm run build

      - name: Configure PHP 8.3
        uses: shivammathur/setup-php@master
        with:
          php-version: '8.3'
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        env:
          ENV: ${{ vars.ENV }}
        run: |
          printf "%s" "$ENV" > ".env"
          composer install --prefer-dist --optimize-autoloader --no-dev

      - name: Deploy to AWS Lambda
        run: |
          printf "%s" "$ENV" > ".env"
          npx serverless deploy --stage=\\stage\\ --param='VPC_ID=${{ vars.VPC_ID }}' --param='DB_PASSWORD=${{ vars.DB_PASSWORD }}' --param='SSL_ARN=${{ vars.SSL_ARN }}'
          npx serverless bref:cli --stage=\\stage\\ --args="migrate --force" --function artisan --param='VPC_ID=${{ vars.VPC_ID }}' --param='DB_PASSWORD=${{ vars.DB_PASSWORD }}' --param='SSL_ARN=${{ vars.SSL_ARN }}'
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          ENV: ${{ vars.ENV }}
